def IMAGES = ['auth', 'cotes', 'inscription', 'enseignement']

pipeline {
    agent any
    environment {
        DOCKERUSER = 'henock001'
        // Indique à Docker où trouver le démon
        DOCKER_HOST = 'tcp://localhost:2375'
    }

    stages {
        stage('clone repository') {
            steps {
                git branch: 'main', url: 'https://github.com/KITUNGANOLUNGELE/backend.git'
            }
        }

        stage('build images') {
            steps {
                script {
                    IMAGES.each { app ->
                        echo "construction de l'image ${DOCKERUSER}/${app}:v1 a partir de ./${app}"
                        bat "docker build -t ${DOCKERUSER}/${app}:v1 ./${app}"
                    }
                }
            }
        }

        // stage('charge les images dans minikube') {
        //     steps {
        //         script {
        //             // Configure docker-env pour CMD (Windows)
        //             bat 'for /f "usebackq tokens=*" %%i in (`minikube -p minikube docker-env --shell cmd`) do (%%i)'

        //             IMAGES.each { app ->
        //                 echo "Lecture de ${DOCKERUSER}/${app}:v1 dans minikube"
        //                 bat "minikube image load ${DOCKERUSER}/${app}:v1"
        //             }
        //         }
        //     }
        // }

        stage('deployment sous kubernet') {
            steps {
                echo 'Deployement sur kubernet'
                bat 'kubectl apply -f /k8s/'
            }
        }

        stage('verification des deployement') {
            steps {
                echo 'lister les pods'
                bat 'kubectl get pods'
                echo 'lister les services'
                bat 'kubectl get svc'
            }
        }
    }

    post {
        always {
            echo 'pipeline finibated '
        }

        success {
            echo 'deployment successfull ✅'
        }

        failure {
            echo 'pipeline failed ❌'
        }
    }
}
