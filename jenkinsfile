def IMAGES = ['auth', 'cotes', 'inscription', 'enseignement']

pipeline {
    agent any
    environment {
        DOCKERUSER = 'henock001'
        // Indique à Docker où trouver le démon
        DOCKER_HOST = 'tcp://localhost:2375'
    }

    stages {
        stage('clone repository') {
            steps {
                git branch: 'main', url: 'https://github.com/KITUNGANOLUNGELE/backend.git'
            }
        }

        stage('build images') {
            steps {
                script {
                    IMAGES.each { app ->
                        echo "construction de l'image ${DOCKERUSER}/${app}:v1 a partir de ./${app}"
                        bat "docker build -t ${DOCKERUSER}/${app}:v1 ./${app}"
                    }
                }
            }
        }

        stage('lister les fichiers') {
            steps {
                bat 'dir'
            }
        }

        stage('deployment sous kubernet') {
            steps {
                echo 'Deployement sur kubernet'
                withEnv(['KUBECONFIG=C:\\Users\\hlung\\.kube\\config']) {
                    bat 'kubectl apply -f k8s'
                }
            }
        }

        stage('verification des deployement') {
            steps {
                echo 'lister les pods'
                withEnv(['KUBECONFIG=C:\\Users\\hlung\\.kube\\config']) {
                    bat 'kubectl get pods'
                }
                echo 'lister les services'
                withEnv(['KUBECONFIG=C:\\Users\\hlung\\.kube\\config']) {
                    bat 'kubectl get svc'
                }
            }
        }
        stage('Restart Deployments') {
            steps {
                script {
                    // Définir le kubeconfig si nécessaire
                    withEnv(['KUBECONFIG=C:\\Users\\hlung\\.kube\\config']) {
                        // Récupérer la liste des déploiements
                        def deploymentsOutput = bat(
                            script: 'kubectl get deployments -n default -o name',
                            returnStdout: true
                        ).trim()

                        echo "Déploiements trouvés:\n${deploymentsOutput}"

                        // Découper la sortie ligne par ligne et redémarrer chaque déploiement
                        deploymentsOutput.split('\r?\n').each { deployName ->
                            echo "Redémarrage de ${deployName}"
                            bat "kubectl rollout restart ${deployName} -n default"
                        }
                    }
                }
            }}
        }

    post {
        always {
            echo 'pipeline finibated '
        }

        success {
            echo 'deployment successfull ✅'
        }

        failure {
            echo 'pipeline failed ❌'
        }
    }
    }
